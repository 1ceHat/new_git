from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio

__API = open('secret.txt', 'r').read()
bot = Bot(token=__API)
dp = Dispatcher(bot, storage=MemoryStorage())

Help = '''
'''


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.')


@dp.message_handler(text=['Calories'])
async def set_age(message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã–µ –≥–æ–¥–∞)')
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=float(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö')
    await UserState.weight.set()



@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=float(message.text))
    data = await state.get_data()
    male_calories = 10*data['weight'] + 6.25*data['growth'] - 5*data['age'] + 5
    female_calories = 0*data['weight'] + 6.25*data['growth'] - 5*data['age'] + 161
    await message.answer(f'–í–∞—à–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π:\nüîµ{male_calories} - –µ—Å–ª–∏ –í—ã –º—É–∂—á–∏–Ω–∞'
                         f'\nüü£{female_calories} - –µ—Å–ª–∏ –í—ã –∂–µ–Ω—â–∏–Ω–∞')
    await state.finish()



@dp.message_handler()
async def all_messages(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —Å—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')


if __name__ == "__main__":
    executor.start_polling(dp)
