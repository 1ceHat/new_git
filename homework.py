from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

# ----- Settings ------
__API = open('secret.txt', 'r').read()
bot = Bot(token=__API)
dp = Dispatcher(bot, storage=MemoryStorage())
Help = '''
/start = –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
'''


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()
# --------------------

# ------ Keyboards ------


reply_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
inline_keyboard = InlineKeyboardMarkup(row_width=4)

reply_keyboard.add(KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'), KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
inline_keyboard.add(InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories'),
                    InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã', callback_data='formulas'))

# -------------------------


@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.', reply_markup=reply_keyboard)


@dp.callback_query_handler(text='calories')
async def set_age(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã–µ –≥–æ–¥–∞)')
    await UserState.age.set()
    await call.answer()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=float(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=float(message.text))
    data = await state.get_data()
    male_calories = 10 * data['weight'] + 6.25 * data['growth'] - 5 * data['age'] + 5
    female_calories = 0 * data['weight'] + 6.25 * data['growth'] - 5 * data['age'] - 161
    await message.answer(f'–í–∞—à–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π:\nüîµ{male_calories} - –µ—Å–ª–∏ –í—ã –º—É–∂—á–∏–Ω–∞'
                         f'\nüü£{female_calories} - –µ—Å–ª–∏ –í—ã –∂–µ–Ω—â–∏–Ω–∞')
    await state.finish()


@dp.message_handler(text=['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'])
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=inline_keyboard)


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('10*–≤–µ—Å (–∫–≥) + 6.25*—Ä–æ—Å—Ç (—Å–º) - 5*–≤–æ–∑—Ä–∞—Å—Ç (–≥) [+5, –µ—Å–ª–∏ –º—É–∂—á–∏–Ω–∞ / -161, –µ—Å–ª–∏ –∂–µ–Ω—â–∏–Ω–∞]')


@dp.message_handler()
async def all_messages(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')


if __name__ == "__main__":
    executor.start_polling(dp)
